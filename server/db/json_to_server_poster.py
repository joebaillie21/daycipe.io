'''
This script is used to post jokes, facts, and recipes to the PostgreSQL database via REST API.
It reads the content from JSON files generated by the one_day_generator.py script and posts them to the respective endpoints.
The one_day_generator.py script needs to be ran first.

To view the outputs for recipes and facts, take a look at the example_daily_outputs directory.

# NOTE: For now, the date that gets printed is just the today's date, not the date of the content.
'''
import json
import requests
import datetime
import argparse

content_directory = "daily_outputs"

# === POST JOKES ===
def post_jokes(date, verbose=False, JOKE_URL=None):
    date_str = date.strftime("%B %d")  # Format: Month Day (e.g., "December 16")
    try:
        filepath = content_directory + "/jokes_" + date_str + ".json"
        with open(filepath, "r", encoding="utf-8") as f:
            jokes = json.load(f)

        for joke_text in jokes:
            payload = {
                "joke": {
                    "date": date.isoformat(),
                    "content": joke_text
                }
            }
            response = requests.post(JOKE_URL, json=payload)
            if response.ok:
                if (verbose): print(f"✅ Joke posted: {joke_text}")
            else:
                print(f"❌ Failed to post joke: {response.text}")
    except Exception as e:
        print(f"⚠️ Error posting jokes: {e}")

# === POST FACTS ===
def post_facts(date, verbose=False, FACT_URL=None):
    date_str = date.strftime("%B %d")  # Format: Month Day (e.g., "December 16")
    try:
        filepath = content_directory + "/facts_" + date_str + ".json"
        with open(filepath, "r", encoding="utf-8") as f:
            facts = json.load(f)

        category_map = {
            "mathematics": "math",
            "physics": "physics",
            "biology": "bio",
            "computer science": "compsci",
            "chemistry": "chem"
        }

        for label, data in facts.items():
            mapped_category = category_map.get(label.lower())
            if not mapped_category:
                print(f"⚠️ Skipping unrecognized category: {label}")
                continue            

            payload = {
                "fact": {
                    "date": date.isoformat(),
                    "content": data["fact"], # size limit is 1000 characters
                    "source": data["source"], # size limit is 200 characters
                    "category": mapped_category
                }
            }

            response = requests.post(FACT_URL, json=payload)
            if response.ok:
                if (verbose): print(f"✅ Fact posted ({mapped_category}): {data['fact'][:60]}...")
            else:
                print(f"❌ Failed to post fact ({label}): {response.text}")
    except Exception as e:
        print(f"⚠️ Error posting facts: {e}")

# === POST RECIPES ===
def post_recipes(date, verbose=False, RECIPE_URL=None):
    date_str = date.strftime("%B %d")  # Format: Month Day (e.g., "December 16")
    try:
        filepath = content_directory + "/recipes_" + date_str + ".json"
        with open(filepath, "r", encoding="utf-8") as f:
            recipes = json.load(f)

        # Here, recipe is a JSON with the structure:
        # {title, description, ingredients:{}, instructions:[], cook_time, serving_size}
        for category, recipe in recipes.items():
            payload = {
                "recipe": {
                    "date": date.isoformat(),
                    "content": recipe,
                    "category": category
                }
            }
            response = requests.post(RECIPE_URL, json=payload)
            if response.ok:
                if (verbose): print(f"✅ Recipe posted ({category}): {recipe['title'][:60]}...")
            else:
                print(f"❌ Failed to post recipe ({category}): {response.text}")
    except Exception as e:
        print(f"⚠️ Error posting recipes: {e}")


def post_content(date_range, verbose=False, isDeployment=False):
    if verbose:
        print(f"Verbose mode is on. Generating content for {date_range} days.")

    # URLs
    if isDeployment:
        print("Posting content to production deployment API.")
        API = "https://daycipe-io-server.onrender.com"
    else:
        print("Posting content to local development API.")
        API = "http://localhost:3001"

    JOKE_URL = f"{API}/api/jokes/create"
    FACT_URL = f"{API}/api/facts/create"
    RECIPE_URL = f"{API}/api/recipes/create"

    # Get today's date for the recipe and fact generation
    today = datetime.date.today()
    # The format of datestring is "Month Day" (e.g., "January 01")
    # date_string = "December 16"    # Uncomment this line to use a specific date in the format "Month Day"
    for i in range(date_range):
        date = today - datetime.timedelta(days=i)
        date_str = date.strftime("%B %d")
        print("Posting content for date:", date_str)
        post_jokes(date, verbose, JOKE_URL)
        post_facts(date, verbose, FACT_URL)
        post_recipes(date, verbose, RECIPE_URL)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Post jokes, facts, and recipes to the PostgreSQL database via REST API.")
    parser.add_argument("--days", type=int, default=1, help="Number of days to post content for (default: 1)")
    parser.add_argument("--production", action="store_true", help="Use the production deployment API")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose output")
    args = parser.parse_args()

    post_content(args.days, args.verbose)